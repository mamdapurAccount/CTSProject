

1. Create the app

npx create-react-app react-crud-fetchawait
cd react-fetchawait


2. Install dependencies

npm install @mui/material @emotion/react @emotion/styled 

npm install @mui/icons-material

3. Setup json-server
npm install -g json-server

Create db.json file:
{
  "users": [
    { "id": 1, "name": "Rohit Shetty", "email": "rohit@gmail.com" },
    { "id": 2, "name": "Darshan Singh", "email": "rohit@gmail.com" }
  ]
}

json-server --watch db.json --port 4000

http://localhost:4000/users

Final Structure

db.jason
src/
├── App.js
├── components/
│   ├── UserForm.js
│   └── UserList.js
└── index.js


3.components/UserForm.js

import React, { useState, useEffect } from 'react';
import { TextField, Button, Box } from '@mui/material';

function UserForm({ onSubmit, editingUser }) {
  const [form, setForm] = useState({ name: '', email: '' });

  useEffect(() => {
    if (editingUser) setForm(editingUser);
  }, [editingUser]);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!form.name || !form.email) return alert('Please fill all fields');
    onSubmit(form);
    setForm({ name: '', email: '' });
  };

  return (
    <Box component="form" onSubmit={handleSubmit} sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
      <TextField
        label="Name"
        name="name"
        value={form.name}
        onChange={handleChange}
        required
      />
      <TextField
        label="Email"
        name="email"
        value={form.email}
        onChange={handleChange}
        required
      />
      <Button type="submit" variant="contained" color="primary">
        {editingUser ? 'Update' : 'Add'}
      </Button>
    </Box>
  );
}

export default UserForm;


4.components/UserList.js

import React from 'react';
import {
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  IconButton,
  Typography,
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';

function UserList({ users, onEdit, onDelete }) {
  return (
    <div>
      <Typography variant="h6">User List</Typography>
      <List>
        {users.map((user) => (
          <ListItem key={user.id} divider>
            <ListItemText primary={user.name} secondary={user.email} />
            <ListItemSecondaryAction>
              <IconButton edge="end" onClick={() => onEdit(user)} color="primary">
                <EditIcon />
              </IconButton>
              <IconButton edge="end" onClick={() => onDelete(user.id)} color="error">
                <DeleteIcon />
              </IconButton>
            </ListItemSecondaryAction>
          </ListItem>
        ))}
      </List>
    </div>
  );
}

export default UserList;

5.App.js

import React, { useEffect, useState } from 'react';
import { Container, Typography, Divider } from '@mui/material';
import UserForm from './components/UserForm';
import UserList from './components/UserList';

const API_URL = 'https://jsonplaceholder.typicode.com/users';

function App() {
  const [users, setUsers] = useState([]);
  const [editingUser, setEditingUser] = useState(null);

  const fetchUsers = async () => {
    try {
      const response = await fetch(API_URL);
      const data = await response.json();
      setUsers(data);
    } catch (error) {
      console.error('Fetch error:', error);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const addUser = async (user) => {
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(user),
      });
      const newUser = await response.json();
      setUsers([...users, newUser]);
    } catch (error) {
      console.error('Add error:', error);
    }
  };

  const updateUser = async (updatedUser) => {
    try {
      const response = await fetch(`${API_URL}/${updatedUser.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedUser),
      });
      const data = await response.json();
      setUsers(users.map((u) => (u.id === updatedUser.id ? data : u)));
      setEditingUser(null);
    } catch (error) {
      console.error('Update error:', error);
    }
  };

  const deleteUser = async (id) => {
    try {
      await fetch(`${API_URL}/${id}`, {
        method: 'DELETE',
      });
      setUsers(users.filter((u) => u.id !== id));
    } catch (error) {
      console.error('Delete error:', error);
    }
  };

  return (
    <Container>
      <Typography variant="h4" gutterBottom sx={{ mt: 3 }}>
        React CRUD (fetch + Material UI)
      </Typography>
      <UserForm onSubmit={editingUser ? updateUser : addUser} editingUser={editingUser} />
      <Divider sx={{ my: 3 }} />
      <UserList users={users} onEdit={setEditingUser} onDelete={deleteUser} />
    </Container>
  );
}

export default App;


6.index.js

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import CssBaseline from '@mui/material/CssBaseline';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <>
    <CssBaseline />
    <App />
  </>
);


